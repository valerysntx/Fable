{"version":3,"sources":["../samples/browser/virtualdom/virtualdom.fsx"],"names":[],"mappings":"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","file":"virtualdom.js","sourceRoot":"/Users/alfonsogarciacaronunez/Documents/Github/Fable/temp","sourcesContent":["(**\n - title: The Elm architecture using Fable\n - tagline: Fable implementation of the Elm architecture\n - app-style: width:800px; margin:20px auto 50px auto;\n - require-paths: `'virtual-dom':'lib/virtual-dom'`\n - intro: This demo is an implementation of the [Elm architecture](http://guide.elm-lang.org/architecture/)\n   using the same [virtual-dom](https://github.com/Matt-Esch/virtual-dom) as Elm originally used.\n   Contributed by [Tomas Jansson](https://twitter.com/TomasJansson).\n*)\n(*** hide ***)\n#r \"node_modules/fable-core/Fable.Core.dll\"\n#load \"node_modules/fable-import-virtualdom/Fable.Helpers.Virtualdom.fs\"\n//#load \"../../../import/virtualdom/Fable.Helpers.Virtualdom.fs\"\n(**\n##Architecture overview\n\nThe beauty of the architecture Elm is using for their application is its\nsimplicity. You can read and grasp the whole architecture in a matter of minutes\nhere: http://guide.elm-lang.org/architecture/. I won't explain the architecture\nfurther, instead I will go straight to the examples.\n\n###First example - a simple counter with svg and ajax call simulation\n\nThe example below doesn't make any sense except for demonstrating most of \nthe framework. The example consists of a counter that you can increment and \ndecrement by clicking on the labels. The color and some styling (height) \nchanges depending on the counter. Above the counter is a simple svg square \nthat also changes color on based on a threshold. To bootstrap the \napplication a fake ajax call is made using a timeout, that function is \nalso called for each click on any of the labels faking more ajax call.\n\n<div id=\"counter\">\n</div>\n\n*)\nopen Fable.Core\nopen Fable.Core.JsInterop\nopen Fable.Import\nopen Fable.Import.Browser\n\nopen Fable.Helpers.Virtualdom\nopen Fable.Helpers.Virtualdom.App\nopen Fable.Helpers.Virtualdom.Html\n\n// model\ntype Counter = int\nlet initCounter = 0\n\n(**\nThe model for the first example is a simple integer that will act as hour counter.\nWe also provide a default value for our counter.\n*)\n\n// Update\ntype CounterAction =\n    | Decrement of int\n    | Increment of int\n\nlet fakeAjaxCall model (h:CounterAction->unit) = \n    let message = if model < 30 then Increment 10 else Decrement 5 \n    if model > 30 && model < 60 then () \n    else window.setTimeout((fun _ -> h (message)), 2000) |> ignore\n\nlet counterUpdate model command =\n    match command with\n    | Decrement x -> model - x\n    | Increment x -> model + x\n    |> (fun m -> m, (fakeAjaxCall model) |> toActionList) \n\n(**\nThe counter can be incremented or decremented in step of `x`. If you look closely\nthe update function return the new model, a list of something and a second list of \nfunctions. The list of something is a list of functions of type `unit->unit` that \nwill be executed after this version of the model has been rendered. That way\nyou can run some custom js after something has been rendered. The last list of\nfunctions is a list of \"long\" running functions. These functions must be of \nthe type `('TMessage -> unit) -> unit`. The first argument is what makes it \npossible for these long running functions to trigger a new update. In our \nexample we use `fakeAjaxCall` to simulate a function call that \ntake a while to execute. The type doesn't match completely of what is \nexpected, but after we partially apply it in `counterUpdate` we do get the right type.\n*)\n\n// View\nlet counterView model =\n    let bgColor =\n        match model with\n        | x when x > 10 -> \"red\"\n        | x when x < 0 -> \"blue\"\n        | _ -> \"green\"\n    div []\n        [\n            div [ Style [\"width\", \"120px\"; \"height\", \"120px\"] ] [\n                svg [ width \"120\"; height \"120\"; viewBox \"0 0 100 100\" ]\n                    [ rect [width \"110\"; height \"110\"; fill bgColor] []]\n            ]\n            div [ Style [\"border\",\"1px solid blue\"]\n                  onMouseClick (fun x -> (Increment 1))\n                  onDblClick (fun x -> ((Increment 10)))]\n                [ text (string \"Increment\")]\n            div [ Style [\"background-color\", bgColor; \"color\", \"white\"]]\n                [text (string model)]\n            div [ Style [\"border\", \"1px solid green\";\n                         \"height\", ((string (7 + model)) + \"px\")]\n                  onMouseClick (fun x -> (Decrement 1))\n                  onDblClick (fun x -> (Decrement 5))]\n                [ text (string \"Decrement\")]\n        ]\n\n(**\nThe `counterView` defines how a model should be rendered. The dsl that is used\nhere is quite simple and have helper functions for a majority of the standard\nHTML elements. It is trivial to add custom tags if you are missing some tag\nthat you would like to use.\n\nYou define a `svg` the same way as you do with any other html element. \n*)\n\n// Start the application\ncreateApp initCounter counterView counterUpdate\n|> withInitMessage (fakeAjaxCall initCounter) \n|> withStartNodeSelector \"#counter\"\n|> start renderer\n\n(**\nThe dsl has been separated from the actual rendering of the dsl, to allow for\nfuture server side rendering as well. In this example we first call the \n`createApp` function to create the application, there is a `createSimpleApp`\nthat requires a simpler version of the update function of you don't do actions\nfrom the update function. The `withInitMessage` takes a function that returns\na message to bootstrap the application. The `withNodeSelector` is used to \nplace the application in the DOM. When we have an application we can call\n`start` with a given `renderer` to start the application.\n\n### Second example - nesting\n\nThis is just an add-on to the first example to illustrate how you could\nnest applications together. Nesting basically means re-use the view\nand update function. \n\n<div id=\"nested-counter\">\n</div>\n\n*)\n\ntype NestedModel = { Top: int; Bottom: int}\n\ntype NestedAction = \n    | Reset\n    | Top of CounterAction\n    | Bottom of CounterAction\n\nlet nestedUpdate model action = \n    match action with\n    | Reset -> {Top = 0; Bottom = 0},[]\n    | Top ca -> \n        let (res, action) = (counterUpdate model.Top ca)\n        let action' = App.mapActions Top action\n        {model with Top = res},action'\n    | Bottom ca -> \n        let (res, action) = (counterUpdate model.Bottom ca)\n        let action' = App.mapActions Bottom action\n        {model with Bottom = res},action'\n\nlet nestedView model = \n    div []\n        [\n            Html.map Top (counterView model.Top)\n            Html.map Bottom (counterView model.Bottom)\n        ]\n\nlet resetEveryTenth h =\n    window.setInterval((fun _ -> Reset |> h), 10000) |> ignore\n\ncreateApp {Top = 0; Bottom = 0} nestedView nestedUpdate\n|> withStartNodeSelector \"#nested-counter\"\n|> withProducer resetEveryTenth\n|> start renderer\n\n(**\nTo get this application started you first\nneed to create the application with the `createApp` function. Then we pass that\nresult to a helper function, `withStartNodeSelector` to specify where in the document \nit should be rendered, default is directly in the body. We also want to reset both\ncounters every tenth second to simulate async updates from things that happens\noutside the application repeatedly, and to do that we use the `withProducer` helper. The \n`withProducer` helper is a function that calls the given handler with a message\nwhen needed, in this example it is on a interval. To start the \napplication by making a call to our `fakeAjaxCall` function, this will result\nin an update of the model two seconds after the application starts.\n\nWhen we have defined an application we can call\nthe `start` function and pass in a `renderer`. We are using the standard `renderer`\nfor `virtual-dom.js`, but this separation makes it a little bit easier to change\nto another framework in the future.\n\nThat's it, the first application is done and we are ready for example 2.\n\n### Second example - todomvc\n\nTo have something to compare to other js-framework, Elm and whatnot a todomvc app\nis in its place. If you don't know what todomvc is check it out here:\nhttp://todomvc.com/. The app below should have all the features expected from a\ntodomvc app.\n\n<div id=\"todo\">\n</div>\n\nWe will follow the exact same steps as with the counter example. First implement\nthe model, then the update function that to handle actions and lastly the view.\nThis example is a little bit longer and have some more features. I'll also show\nhow easy it is to store data from the model in the local storage, and that could\neasily be swapped to server side storage without effecting any of the application\ncode. Let's start.\n*)\n\n// Todo model\ntype Filter =\n    | All\n    | Completed\n    | Active\n\ntype Item =\n    {\n        Name: string\n        Done: bool\n        Id: int\n        IsEditing: bool\n    }\n\ntype TodoModel =\n    {\n        Items: Item list\n        Input: string\n        Filter: Filter\n    }\n\n(**\nThe model is really simple. It consists of a list of items, which you can edit\nand they can be marked as done. You also have a input field and something to\nfilter the models with. I use a discriminated union to filter the items, which\nis a nice feature you don't have in standard js.\n*)\n\n// Todo update\ntype TodoAction =\n    | NoOp\n    | AddItem\n    | ChangeInput of string\n    | MarkAsDone of Item\n    | ToggleItem of Item\n    | Destroy of Item\n    | CheckAll\n    | UnCheckAll\n    | SetActiveFilter of Filter\n    | ClearCompleted\n    | EditItem of Item\n    | SaveItem of Item*string\n\n(**\nFirst we define the actual actions before moving on to the actual update function.\n*)\n\nlet todoUpdate model msg =\n    let updateItems model f =\n        let items' = f model.Items\n        {model with Items = items'}\n\n    let checkAllWith v =\n        List.map (fun i -> { i with Done = v })\n        |> updateItems model\n\n    let updateItem i model =\n        List.map (fun i' ->\n                if i'.Id <> i.Id then i' else i)\n        |> updateItems model\n\n    let model' =\n        match msg with\n        | NoOp -> model\n        | AddItem ->\n            let maxId =\n                if model.Items |> List.isEmpty then 1\n                else\n                    model.Items\n                    |> List.map (fun x -> x.Id)\n                    |> List.max\n            (fun items ->\n                items @ [{  Id = maxId + 1\n                            Name = model.Input\n                            Done = false\n                            IsEditing = false}])\n            |> updateItems {model with Input = \"\"}\n        | ChangeInput v -> {model with Input = v}\n        | MarkAsDone i ->\n            updateItem {i with Done = true} model\n        | CheckAll -> checkAllWith true\n        | UnCheckAll -> checkAllWith false\n        | Destroy i ->\n            List.filter (fun i' -> i'.Id <> i.Id)\n            |> updateItems model\n        | ToggleItem i ->\n            updateItem {i with Done = not i.Done} model\n        | SetActiveFilter f ->\n            { model with Filter = f }\n        | ClearCompleted ->\n            List.filter (fun i -> not i.Done)\n            |> updateItems model\n        | EditItem i ->\n            updateItem { i with IsEditing = true} model\n        | SaveItem (i,str) ->\n            updateItem { i with Name = str; IsEditing = false} model\n\n    let jsCall =\n        match msg with\n        | EditItem i -> toActionList <| fun x -> document.getElementById(\"item-\" + (i.Id.ToString())).focus()\n        | _ -> []\n    model', jsCall\n\n(**\nIt might seem like a lot of code, but we need to handle all actions and respond\nto them accordingly, and this is basically all the logic associated with the todo app. \nI won't go into the detail in all the scenarios, but you\nshould pay attention to the step where `jsCalls` is defined. Since we are re-rendering\nthe application on changes in the model, or render what has changed as least, we need\na way to give an input focus if we start edit it. That is when the list of js\nfunction calls come in handy. So the update function returns the new model a\nlong side a list of js function calls if we need to do something after rendering,\nand that is something we need to do when we start edit an item, we want to give\nthat item focus.\n\nWith this done all we need is to define the view.\n*)\n\n// Todo view\nlet filterToTextAndUrl = function\n    | All -> \"All\", \"\"\n    | Completed -> \"Completed\", \"completed\"\n    | Active -> \"Active\", \"active\"\n\nlet filter activeFilter f =\n    let linkClass = if f = activeFilter then \"selected\" else \"\"\n    let fText,url = f |> filterToTextAndUrl\n    li\n        [ onMouseClick (fun _ -> SetActiveFilter f)]\n        [ a\n            [ attribute \"href\" (\"#/\" + url); attribute \"class\" linkClass ]\n            [ text fText] ]\n\nlet filters model =\n    ul\n        [ attribute \"class\" \"filters\" ]\n        ([ All; Active; Completed ] |> List.map (filter model.Filter))\n\nlet todoFooter model =\n    let clearVisibility =\n        if model.Items |> List.exists (fun i -> i.Done)\n        then \"\"\n        else \"none\"\n    let activeCount =\n        model.Items\n        |> List.filter (fun i -> not i.Done)\n        |> List.length |> string\n    footer\n        [   attribute \"class\" \"footer\"; Style [\"display\",\"block\"]]\n        [   span\n                [   attribute \"class\" \"todo-count\" ]\n                [   strong [] [text activeCount]\n                    text \" items left\" ]\n            (filters model)\n            button\n                [   attribute \"class\" \"clear-completed\"\n                    Style [ \"display\", clearVisibility ]\n                    onMouseClick (fun _ -> ClearCompleted)]\n                [ text \"Clear completed\" ] ]\n\nlet inline onInput x = onEvent \"oninput\" (fun e -> x (unbox e?target?value)) \nlet onEnter succ nop = onKeyup (fun x -> if (unbox x?keyCode) = 13 then succ else nop)\nlet todoHeader model =\n    header\n        [attribute \"class\" \"header\"]\n        [   h1 [] [text \"todos\"]\n            input [ attribute \"class\" \"new-todo\"\n                    attribute \"id\" \"new-todo\"\n                    property \"value\" model\n                    property \"placeholder\" \"What needs to be done?\"\n                    onInput (fun x -> ChangeInput x)\n                    onEnter AddItem NoOp ]]\nlet listItem item =\n    let itemChecked = if item.Done then \"true\" else \"\"\n    let editClass = if item.IsEditing then \"editing\" else \"\"\n    li [ attribute \"class\" ((if item.Done then \"completed \" else \" \") + editClass)]\n       [ div [  attribute \"class\" \"view\"\n                onDblClick (fun x -> EditItem item) ]\n             [ input [  property \"className\" \"toggle\"\n                        property \"type\" \"checkbox\"\n                        property \"checked\" itemChecked\n                        onMouseClick (fun e -> ToggleItem item) ]\n               label [] [ text item.Name ]\n               button [ attribute \"class\" \"destroy\"\n                        onMouseClick (fun e -> Destroy item) ] [] ]\n         input [ attribute \"class\" \"edit\"\n                 attribute \"value\" item.Name\n                 property \"id\" (\"item-\"+item.Id.ToString())\n                 onBlur (fun e -> SaveItem (item, (unbox e?target?value))) ] ]\n\nlet itemList items activeFilter =\n    let filterItems i =\n        match activeFilter with\n        | All -> true\n        | Completed -> i.Done\n        | Active -> not i.Done\n\n    ul [attribute \"class\" \"todo-list\" ]\n       (items |> List.filter filterItems |> List.map listItem)\n\nlet todoMain model =\n    let items = model.Items\n    let allChecked = items |> List.exists (fun i -> not i.Done)\n    section [  attribute \"class\" \"main\"\n               Style [ \"style\", \"block\" ] ]\n            [   input [ property \"id\" \"toggle-all\"\n                        attribute \"class\" \"toggle-all\"\n                        property \"type\" \"checkbox\"\n                        property \"checked\" (if not allChecked then \"true\" else \"\")\n                        onMouseClick (fun e ->\n                                    if allChecked\n                                    then CheckAll\n                                    else UnCheckAll) ]\n                label [ attribute \"for\" \"toggle-all\" ]\n                      [ text \"Mark all as complete\" ]\n                (itemList items model.Filter) ]\n\nlet todoView model =\n    section\n        [attribute \"class\" \"todoapp\"]\n        ((todoHeader model.Input)::(if model.Items |> List.isEmpty\n                then []\n                else [  (todoMain model)\n                        (todoFooter model) ] ))\n\n(**\nThis view is more complex than the first example, but it also show how easy it is\nto split a view up into pieces and then combine them together to form a whole. This\nmakes it quite easy to re-use parts in different views.\n\nOne thing to notice is that only a few properties are mapped at the moment, but if\nyou know the property name you can use the syntax `e?target?value`, which will\nlook app the `value` property on the `target` property on the `e` event as in the\nexample above, and that is what is done in the helper function `onInput`.\n\nBefore this is done, there are one hidden gem that is worth knowing, and it will\nbe showed with two examples. We will add local storage support of the items and a\nlogger of all the actions and model changes. First we need a helper for the storage.\n*)\n\n// Storage\nmodule Storage =\n    let private STORAGE_KEY = \"vdom-storage\"\n    open Microsoft.FSharp.Core\n    let fetch<'T> (): 'T [] =\n        Browser.localStorage.getItem(STORAGE_KEY)\n        |> function null -> \"[]\" | x -> unbox x\n        |> JS.JSON.parse |> unbox\n\n    let save<'T> (todos: 'T []) =\n        Browser.localStorage.setItem(STORAGE_KEY, JS.JSON.stringify todos)\n\n(**\nThe module above is a simple helper to store a list of items in local storage\nof the browser, now let's add it and support for logging.\n*)\n\nopen Storage\nlet initList = fetch<Item>() |> List.ofArray\nlet initModel = {Filter = All; Items = initList; Input = \"\"}\n\ncreateApp initModel todoView todoUpdate\n|> (withSubscriber \"storagesub\" (function\n        | ModelChanged (newModel,old) ->\n            save (newModel.Items |> Array.ofList)\n        | _ -> ()))\n|> (withSubscriber \"modellogger\" (printfn \"%A\"))\n|> withStartNodeSelector \"#todo\"\n|> start renderer\n\n(**\nFirst we initiate the model by checking the local storage if there are any items\nthere. The to add support for local storage we add a subscriber. A subscriber is\na function that handles `AppEvents`, they can be `ModelChanged` or `ActionReceived`.\nFor the storage we are only interested in model changes, so that is what we act on\nand store the list of items in the local storage when the model was changed. For\nthe logger we just logs everything.\n\nWe also start the application on the `#todo` element in the document.\n\n### Creating custom elements\n\nIf some tag or you want to create a custom helper function that represent some\nhtml element it is easy to extend the dsl with your needs. To add a custom html\nnode where you set the css class directly you write something like:\n*)\n\nlet inline myDiv className = elem \"div\" [attribute \"class\" className]\n\n(**\n\nCreating svg nodes are as easy as regular html nodes:\n\n*)\n\nlet inline redRect x = svgElem \"rect\" ((fill \"red\")::x)\n\n(**\n\nAs you see the only difference is that you use `svgElem` instead of `elem`. \nYou do this to add the correct namespace to the svg nodes. To see more\nexample of how to define your own tags just look at the source code, \nthe dsl is not that complex.\n\n*)"]}